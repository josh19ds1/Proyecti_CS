<!DOCTYPE html>
<html lang="en">

<head>
<<<<<<< Updated upstream
    <!-- ... -->
=======
    <title>Resultado</title>
    <style>
        /* Agrega estilos CSS para controlar el tamaño y el margen de las gráficas */
        .resuc {
            max-width: 60vw;
            max-height: 50vh;/* Máximo ancho de la gráfica */
            margin-bottom: 20px; /* Margen inferior entre gráficas */
            margin-left: 50px;
        }
        .glob{
            max-width: 80vw;
            max-height: 70vh;/* Máximo ancho de la gráfica */
            margin-bottom: 20px; /* Margen inferior entre gráficas */
            margin-left: 50px;
        }
    </style>
    <!-- Incluye Chart.js en el head -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- ... Otras configuraciones del head ... -->
>>>>>>> Stashed changes
</head>

<body>
    <%let catg=null%>
        <%let Nuevcatg=null%>
            <%let Subc=null%>
                <%let SubcNueva=null%>


<<<<<<< Updated upstream
            <h2>Respondio correctamente</h2>
=======
    <!--  sumar -->
    <% let Suma = 0 %>
    <% let SumResA = [] %>
    <% let CatName = [] %>
>>>>>>> Stashed changes

            <div id="respuesta-container">
                <% results.forEach((res)=> { %>

<<<<<<< Updated upstream

                    <% catg=res.Categorias %>
                    <% Subc=res.SubCategorias %>
                   <!--  Caracteristica -->
                            <% if(catg !== Nuevcatg){%>
                                
                                    <h1><%= catg %></h1>
=======
    <% let ArrResultado = [] %>
    <div id="respuesta-container">
        <% results.forEach((res, index) => { %>
            <% catg = res.Categorias %>
            <% Subc = res.SubCategorias %>
>>>>>>> Stashed changes

                                    <% Nuevcatg=catg %>
                            <% } %>
                            <!-- SubCategorias -->
                                <% if(Subc !== SubcNueva){%>
                                    <h2>
                                        <%= res.SubCategorias %>
                                    </h2>
                                    <h4>
                                        <%= res.respuesta %>
                                    </h4>
                                    <% SubcNueva=Subc %>
                                <% }else{ %>
                                <h4>
                                    <%= res.respuesta %>
                                </h4>
                                <p><%=res.comentario%></p>
                                <% } %>

<<<<<<< Updated upstream
                            <%  %>
            <% }) %>
            </div>
=======
            <!-- Caracteristica -->
            <% if (catg !== Nuevcatg) { %>
                <h1><%= catg %></h1>
                <% ArrResultado.push({ tipo: 'Caracteristica', valor: catg }) %>
                <% if (Suma > 0){ %>
                    <% SumResA.push(Suma) %>
                    <% Suma = 0 %>
                    <% CatName.push(Nuevcatg) %>
                <% } %>
                <% Nuevcatg = catg %>
                <% rn = [] %>
                <% Sb = [] %>
>>>>>>> Stashed changes

            <div>
                <canvas id="myChart"></canvas>
            </div>

            <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<<<<<<< Updated upstream
=======
                <% ArrResultado.push({ tipo: 'SubCategoria', valor: res.SubCategorias }) %>
                <% ArrResultado.push({ tipo: 'Respuesta', valor: res.respuesta }) %>
                <% Suma = Suma + parseInt(res.respuesta) %>
                <!-- guardando los datos al array  -->
                <% Sb.push(res.SubCategorias.toString()) %>
                <% rn.push(res.respuesta) %>
                

                <% SubcNueva = Subc %>
            <% } else { %>

                <% Suma = Suma + (res.respuesta === 'ND' ? 0 : parseInt(res.respuesta, 10)) %>
                <% rn.push(res.respuesta) %>
                <% ArrResultado.push({ tipo: 'Respuesta', valor: res.respuesta }) %>
                <% ArrResultado.push({ tipo: 'Comentario', valor: res.comentario }) %>

                <!-- Incluye el canvas dentro del bucle para cada gráfico -->
                <div>
                    <canvas id="myChart<%= catg + index %>" class="resuc"></canvas>
                </div>
                <h4>Comentarios del evaluador: </h4>
                <h5><%= res.comentario %></h5>
            <% } %>

            <!-- Configuración y datos para la gráfica -->
>>>>>>> Stashed changes
            <script>
                // Función para decodificar entidades HTML en una cadena
                function decodeHTMLEntities(text) {
                    const textArea = document.createElement('textarea');
                    textArea.innerHTML = text;
                    return textArea.value;
                }

                // Tu cadena HTML con entidades HTML
                const htmlString = '<%= JSON.stringify(results) %>';

                // Decodifica las entidades HTML
                const jsonString = decodeHTMLEntities(htmlString);

                // Analiza la cadena JSON
                const respuestaData = JSON.parse(jsonString);

                console.log(respuestaData);

                // Obtiene el contexto del lienzo del gráfico
                const ctx = document.getElementById('myChart').getContext('2d');

                // Extrae las respuestas y valores del JSON
                const respuestas = respuestaData.map(res => res.respuesta);
                const valores = respuestaData.map(res => res.respuesta); // Cambia esto si tienes un campo "valor"

                // Ahora puedes utilizar respuestaData en tu gráfico
                new Chart(ctx, {
                    type: 'pie',
                    data: {
                        labels: respuestas,
                        datasets: [{
                            label: '# of Votes',
                            data: valores,
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            </script>
<<<<<<< Updated upstream
=======

        <% }) %>

        <div>
            <canvas id="mydChart" class="glob"></canvas>
        </div>
    </div>

    <script>
        var SumArrs = JSON.parse('<%- JSON.stringify(SumResA) %>');
        var NameArrs = JSON.parse('<%- JSON.stringify(CatName) %>');

        // Función para decodificar entidades HTML en una cadena
        function decodeHTMLEntities(text) {
            const textArea = document.createElement('textarea');
            textArea.innerHTML = text;
            return textArea.value;
        }

        // Tu cadena HTML con entidades HTML
        const htmlString = '<%= JSON.stringify(results) %>';

        // Decodifica las entidades HTML
        const jsonString = decodeHTMLEntities(htmlString);

        // Analiza la cadena JSON
        const respuestaData = JSON.parse(jsonString);

        console.log(NameArrs)

        // Obtiene el contexto del lienzo del gráfico
        const ln = document.getElementById('mydChart').getContext('2d');

        // Extrae las respuestas y valores del JSON
        const respuestas = respuestaData.map(res => res.respuesta);

        // Ahora puedes utilizar respuestaData en tu gráfico
        new Chart(ln, {
            type: 'pie',
            data: {
                labels: NameArrs,
                datasets: [{
                    label: '# of Votes',
                    data: SumArrs,
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    </script>

>>>>>>> Stashed changes
</body>

</html>